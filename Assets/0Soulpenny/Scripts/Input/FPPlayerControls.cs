//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/FPPlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Soul
{
    public partial class @FPPlayerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @FPPlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""FPPlayerControls"",
    ""maps"": [
        {
            ""name"": ""Base"",
            ""id"": ""023c14a9-5151-4e1a-9fff-f6be527b31e0"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6019600d-f5d6-4bef-b7ee-241585824194"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""5fc12e57-6e26-4feb-9506-395b1c136590"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1cd13e69-272a-40bf-a30a-981e38908605"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""32873570-f284-438d-94f1-6e680b04555e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary"",
                    ""type"": ""Button"",
                    ""id"": ""2ba4833b-d492-4e99-a202-d9eb27c9b205"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary"",
                    ""type"": ""Button"",
                    ""id"": ""980c25ed-9069-4d3b-8d15-765a92a1b643"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""33f49364-706a-465c-8800-0ced53d871b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""beb6455d-cb94-47f7-9e78-18aab7844414"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""4cfc7115-c471-40a8-8a69-c64222234c0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch"",
                    ""type"": ""Button"",
                    ""id"": ""d692a5d8-a4b3-498b-a9cb-2f0c38a81264"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Holster"",
                    ""type"": ""Button"",
                    ""id"": ""d5dac4f0-342e-42d0-bb94-b76d804015e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Alternative"",
                    ""type"": ""Button"",
                    ""id"": ""4e5c738d-1ab7-4719-9a42-677d88ed1244"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""26657d7b-1c1d-474b-8771-0cb03a335686"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9185f039-cc55-430d-a19e-cad0ee135fd5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fbc69004-a848-4cbb-ad99-aa87a6294d66"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""c875c90d-0560-4ffa-88f6-58d2c4443f1a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ec41432c-8a21-4adb-8095-58c03fe1d795"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c139ed57-3d52-4952-8088-61ece5307779"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""79cd179a-6481-40dc-af98-21b471eb024f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7d0a146d-d738-4f9e-afa8-6a7989d97ddb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""7db07273-6eca-4b60-b447-a8e03d19ed33"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f1e51da0-c5e5-4db6-8417-9700dc5cf8c0"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e36b654e-94ee-49a7-b857-08037a695867"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a0743fcf-ce0e-4f60-aef9-442b972dffd5"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""eaac8a19-ec9f-4e56-a81b-312d2ff2e36e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""47d0277e-ec84-4d03-ab11-cc445ae9ba0c"",
                    ""path"": ""<XInputController>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7588d223-6558-48cf-8b36-13d0bf6dbeef"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ab7c552-b2b1-4f9e-822e-63fe06f555de"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(pressPoint=0.2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8723c040-8d21-4965-8e35-65b246ebe4a8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53aeeb6e-70da-4021-a568-0fecaa10f79c"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a458098-e249-4d1a-b64a-583af00a79fe"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": ""Hold(duration=0.1,pressPoint=0.09)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ffaa252-7196-4202-9763-d24edfee5421"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""842f24d7-6368-4452-b573-91d90bc38fcf"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac5924ae-d42c-4bbd-a3f0-8a79cf229b1e"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": ""Press(pressPoint=0.6,behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11728258-2b88-4cbf-b703-c97c337faad7"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a71457aa-827b-42ae-92f3-7026c7babffb"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Holster"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5baf78b-1741-4ee7-bdbb-08064245a97c"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": ""Press(pressPoint=0.2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Alternative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f5b0238-6b49-411e-be1d-7a4e47e800e9"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": ""Press,Hold,Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95ff2fb1-2ef3-4882-8225-b6aed5489a6c"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8945e157-9518-4c32-804e-6fc9185d42f9"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36aafe9f-2384-44d9-8306-1151cc05f524"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Base
            m_Base = asset.FindActionMap("Base", throwIfNotFound: true);
            m_Base_Move = m_Base.FindAction("Move", throwIfNotFound: true);
            m_Base_Crouch = m_Base.FindAction("Crouch", throwIfNotFound: true);
            m_Base_Jump = m_Base.FindAction("Jump", throwIfNotFound: true);
            m_Base_Sprint = m_Base.FindAction("Sprint", throwIfNotFound: true);
            m_Base_Primary = m_Base.FindAction("Primary", throwIfNotFound: true);
            m_Base_Secondary = m_Base.FindAction("Secondary", throwIfNotFound: true);
            m_Base_Interact = m_Base.FindAction("Interact", throwIfNotFound: true);
            m_Base_Drop = m_Base.FindAction("Drop", throwIfNotFound: true);
            m_Base_Throw = m_Base.FindAction("Throw", throwIfNotFound: true);
            m_Base_Switch = m_Base.FindAction("Switch", throwIfNotFound: true);
            m_Base_Holster = m_Base.FindAction("Holster", throwIfNotFound: true);
            m_Base_Alternative = m_Base.FindAction("Alternative", throwIfNotFound: true);
            m_Base_Reload = m_Base.FindAction("Reload", throwIfNotFound: true);
            m_Base_MouseX = m_Base.FindAction("MouseX", throwIfNotFound: true);
            m_Base_MouseY = m_Base.FindAction("MouseY", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Base
        private readonly InputActionMap m_Base;
        private List<IBaseActions> m_BaseActionsCallbackInterfaces = new List<IBaseActions>();
        private readonly InputAction m_Base_Move;
        private readonly InputAction m_Base_Crouch;
        private readonly InputAction m_Base_Jump;
        private readonly InputAction m_Base_Sprint;
        private readonly InputAction m_Base_Primary;
        private readonly InputAction m_Base_Secondary;
        private readonly InputAction m_Base_Interact;
        private readonly InputAction m_Base_Drop;
        private readonly InputAction m_Base_Throw;
        private readonly InputAction m_Base_Switch;
        private readonly InputAction m_Base_Holster;
        private readonly InputAction m_Base_Alternative;
        private readonly InputAction m_Base_Reload;
        private readonly InputAction m_Base_MouseX;
        private readonly InputAction m_Base_MouseY;
        public struct BaseActions
        {
            private @FPPlayerControls m_Wrapper;
            public BaseActions(@FPPlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Base_Move;
            public InputAction @Crouch => m_Wrapper.m_Base_Crouch;
            public InputAction @Jump => m_Wrapper.m_Base_Jump;
            public InputAction @Sprint => m_Wrapper.m_Base_Sprint;
            public InputAction @Primary => m_Wrapper.m_Base_Primary;
            public InputAction @Secondary => m_Wrapper.m_Base_Secondary;
            public InputAction @Interact => m_Wrapper.m_Base_Interact;
            public InputAction @Drop => m_Wrapper.m_Base_Drop;
            public InputAction @Throw => m_Wrapper.m_Base_Throw;
            public InputAction @Switch => m_Wrapper.m_Base_Switch;
            public InputAction @Holster => m_Wrapper.m_Base_Holster;
            public InputAction @Alternative => m_Wrapper.m_Base_Alternative;
            public InputAction @Reload => m_Wrapper.m_Base_Reload;
            public InputAction @MouseX => m_Wrapper.m_Base_MouseX;
            public InputAction @MouseY => m_Wrapper.m_Base_MouseY;
            public InputActionMap Get() { return m_Wrapper.m_Base; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BaseActions set) { return set.Get(); }
            public void AddCallbacks(IBaseActions instance)
            {
                if (instance == null || m_Wrapper.m_BaseActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BaseActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Primary.started += instance.OnPrimary;
                @Primary.performed += instance.OnPrimary;
                @Primary.canceled += instance.OnPrimary;
                @Secondary.started += instance.OnSecondary;
                @Secondary.performed += instance.OnSecondary;
                @Secondary.canceled += instance.OnSecondary;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Drop.started += instance.OnDrop;
                @Drop.performed += instance.OnDrop;
                @Drop.canceled += instance.OnDrop;
                @Throw.started += instance.OnThrow;
                @Throw.performed += instance.OnThrow;
                @Throw.canceled += instance.OnThrow;
                @Switch.started += instance.OnSwitch;
                @Switch.performed += instance.OnSwitch;
                @Switch.canceled += instance.OnSwitch;
                @Holster.started += instance.OnHolster;
                @Holster.performed += instance.OnHolster;
                @Holster.canceled += instance.OnHolster;
                @Alternative.started += instance.OnAlternative;
                @Alternative.performed += instance.OnAlternative;
                @Alternative.canceled += instance.OnAlternative;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @MouseX.started += instance.OnMouseX;
                @MouseX.performed += instance.OnMouseX;
                @MouseX.canceled += instance.OnMouseX;
                @MouseY.started += instance.OnMouseY;
                @MouseY.performed += instance.OnMouseY;
                @MouseY.canceled += instance.OnMouseY;
            }

            private void UnregisterCallbacks(IBaseActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Crouch.started -= instance.OnCrouch;
                @Crouch.performed -= instance.OnCrouch;
                @Crouch.canceled -= instance.OnCrouch;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Sprint.started -= instance.OnSprint;
                @Sprint.performed -= instance.OnSprint;
                @Sprint.canceled -= instance.OnSprint;
                @Primary.started -= instance.OnPrimary;
                @Primary.performed -= instance.OnPrimary;
                @Primary.canceled -= instance.OnPrimary;
                @Secondary.started -= instance.OnSecondary;
                @Secondary.performed -= instance.OnSecondary;
                @Secondary.canceled -= instance.OnSecondary;
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
                @Drop.started -= instance.OnDrop;
                @Drop.performed -= instance.OnDrop;
                @Drop.canceled -= instance.OnDrop;
                @Throw.started -= instance.OnThrow;
                @Throw.performed -= instance.OnThrow;
                @Throw.canceled -= instance.OnThrow;
                @Switch.started -= instance.OnSwitch;
                @Switch.performed -= instance.OnSwitch;
                @Switch.canceled -= instance.OnSwitch;
                @Holster.started -= instance.OnHolster;
                @Holster.performed -= instance.OnHolster;
                @Holster.canceled -= instance.OnHolster;
                @Alternative.started -= instance.OnAlternative;
                @Alternative.performed -= instance.OnAlternative;
                @Alternative.canceled -= instance.OnAlternative;
                @Reload.started -= instance.OnReload;
                @Reload.performed -= instance.OnReload;
                @Reload.canceled -= instance.OnReload;
                @MouseX.started -= instance.OnMouseX;
                @MouseX.performed -= instance.OnMouseX;
                @MouseX.canceled -= instance.OnMouseX;
                @MouseY.started -= instance.OnMouseY;
                @MouseY.performed -= instance.OnMouseY;
                @MouseY.canceled -= instance.OnMouseY;
            }

            public void RemoveCallbacks(IBaseActions instance)
            {
                if (m_Wrapper.m_BaseActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IBaseActions instance)
            {
                foreach (var item in m_Wrapper.m_BaseActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BaseActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public BaseActions @Base => new BaseActions(this);
        public interface IBaseActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnSprint(InputAction.CallbackContext context);
            void OnPrimary(InputAction.CallbackContext context);
            void OnSecondary(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
            void OnDrop(InputAction.CallbackContext context);
            void OnThrow(InputAction.CallbackContext context);
            void OnSwitch(InputAction.CallbackContext context);
            void OnHolster(InputAction.CallbackContext context);
            void OnAlternative(InputAction.CallbackContext context);
            void OnReload(InputAction.CallbackContext context);
            void OnMouseX(InputAction.CallbackContext context);
            void OnMouseY(InputAction.CallbackContext context);
        }
    }
}
